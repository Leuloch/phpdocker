#
#--------------------------------------------------------------------------
# Image Setup
#--------------------------------------------------------------------------
#
# To edit the 'php-fpm' base Image, visit its repository on Github
#    https://github.com/LaraDock/php-fpm
#
# To change its version, see the available Tags on the Docker Hub:
#    https://hub.docker.com/r/laradock/php-fpm/tags/
#

FROM laradock/php-fpm:5.6--1.2

MAINTAINER Mahmoud Zalt <mahmoud@zalt.me>

#
#--------------------------------------------------------------------------
# Mandatory Software's Installation
#--------------------------------------------------------------------------
#
# Mandatory Software's such as ("mcrypt", "pdo_mysql", "libssl-dev", ....)
# are installed on the base image 'laradock/php-fpm' image. If you want
# to add more Software's or remove existing one, you need to edit the
# base image (https://github.com/LaraDock/php-fpm).
#

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libpspell-dev \
        aspell-en


#####################################
# Ghostscript:
#####################################

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        fontconfig

ADD ./ghostscript-9.20.tar.gz /tmp/

RUN cd /tmp/ghostscript-9.20 && \
    ./configure --prefix=/usr --enable-dynamic --disable-compile-inits --with-system-libtiff && \
    make && \
    make so && \
    make install && \
    mkdir /usr/include/ghostscript/ && \
    chmod go+w /usr/include/ghostscript/ && \
    make soinstall && \
    install -v -m644 base/*.h /usr/include/ghostscript && \
    ln -v -s ghostscript /usr/include/ps && \
    ln -sfv ../ghostscript/9.20/doc /usr/share/doc/ghostscript-9.20

ADD ./ghostscript-fonts-std-8.11.tar.gz /usr/share/ghostscript

RUN fc-cache -v /usr/share/ghostscript/fonts/ && \
    chmod go-w /usr/include/ghostscript/ && \
    gs -v

#####################################
# sSMTP for mail support:
#####################################

RUN apt-get update \
    && apt-get install -y -q --no-install-recommends \
        ssmtp \
    && apt-get clean

COPY ./ssmtp.conf /etc/ssmtp/ssmtp.conf

ARG MAIL_HOST=smtp.gmail.com
ARG HOSTNAME=gmail.com
ARG MAIL_USER=username@example.com
ARG MAIL_PASSWORD=password

ENV MAIL_HOST=$MAIL_HOST
ENV HOSTNAME=$HOSTNAME
ENV MAIL_USER=$MAIL_USER
ENV MAIL_PASSWORD=$MAIL_PASSWORD

RUN sed -i 's/CONFIG_MAILHUB/'$MAIL_HOST'/g' /etc/ssmtp/ssmtp.conf && \
    sed -i 's/CONFIG_HOSTNAME/'$HOSTNAME'/g' /etc/ssmtp/ssmtp.conf && \
    sed -i 's/CONFIG_USERNAME/'$MAIL_USER'/g' /etc/ssmtp/ssmtp.conf && \
    sed -i 's/CONFIG_PASSWORD/'$MAIL_PASSWORD'/g' /etc/ssmtp/ssmtp.conf

COPY ./mail.ini   /usr/local/etc/php/conf.d/mail.ini

#
#--------------------------------------------------------------------------
# Optional Software's Installation
#--------------------------------------------------------------------------
#
# Optional Software's will only be installed if you set them to `true`
# in the `docker-compose.yml` before the build.
# Example:
#   - INSTALL_ZIP_ARCHIVE=true
#

#####################################
# SOAP:
#####################################

ARG INSTALL_SOAP=false
RUN if [ ${INSTALL_SOAP} = true ]; then \
    # Install the soap extension
    apt-get -y update && \
    apt-get -y install libxml2-dev php-soap && \ 
    docker-php-ext-install soap \
;fi

#####################################
# xDebug:
#####################################

ARG INSTALL_XDEBUG=false
RUN if [ ${INSTALL_XDEBUG} = true ]; then \
    # Install the xdebug extension
    # pecl install xdebug && docker-php-ext-enable xdebug \
    # workaround for https://github.com/docker-library/php/issues/133
    #     - Xdebug breaks on access to class static property
    apt-get install -y php5-xdebug && \
	echo "zend_extension=/usr/lib/php5/20131226/xdebug.so" > /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini \
;fi

# Copy xdebug configration for remote debugging
COPY ./xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

#####################################
# MongoDB:
#####################################

ARG INSTALL_MONGO=false
RUN if [ ${INSTALL_MONGO} = true ]; then \
    # Install the mongodb extension
    pecl install mongodb && \
    docker-php-ext-enable mongodb \
;fi

#####################################
# ZipArchive:
#####################################

ARG INSTALL_ZIP_ARCHIVE=false
RUN if [ ${INSTALL_ZIP_ARCHIVE} = true ]; then \
    # Install the zip extension
    pecl install zip && \
    docker-php-ext-enable zip \
;fi

#####################################
# bcmath:
#####################################

ARG INSTALL_BCMATH=false
RUN if [ ${INSTALL_BCMATH} = true ]; then \
    # Install the bcmath extension
    docker-php-ext-install bcmath \
;fi

#####################################
# pspell:
#####################################

ARG INSTALL_PSPELL=false
RUN if [ ${INSTALL_PSPELL} = true ]; then \
    # Install the pspell extension
    docker-php-ext-install pspell \
;fi

#####################################
# PHP Memcached:
#####################################

ARG INSTALL_MEMCACHED=false
RUN if [ ${INSTALL_MEMCACHED} = true ]; then \
    # Install the php memcached extension
    pecl install memcached-2.2.0 && \
    docker-php-ext-enable memcached \
;fi

#####################################
# PHP Aerospike:
#####################################

ARG INSTALL_AEROSPIKE_EXTENSION=false
ENV INSTALL_AEROSPIKE_EXTENSION ${INSTALL_AEROSPIKE_EXTENSION}
# Copy aerospike configration for remote debugging
COPY ./aerospike.ini /usr/local/etc/php/conf.d/aerospike.ini
RUN if [ ${INSTALL_AEROSPIKE_EXTENSION} = true ]; then \
    # Install the php aerospike extension
    curl -L -o /tmp/aerospike-client-php.tar.gz "https://github.com/luciano-jr/aerospike-client-php/archive/master.tar.gz" \
    && mkdir -p aerospike-client-php \
    && tar -C aerospike-client-php -zxvf /tmp/aerospike-client-php.tar.gz --strip 1 \
    && ( \
        cd aerospike-client-php/src/aerospike \
        && phpize \
        && ./build.sh \
        && make install \
    ) \
    && rm /tmp/aerospike-client-php.tar.gz \
    && docker-php-ext-enable aerospike \
;fi

#####################################
# Opcache:
#####################################

ARG INSTALL_OPCACHE=false
RUN if [ ${INSTALL_OPCACHE} = true ]; then \
    docker-php-ext-install opcache && \
    docker-php-ext-enable opcache \
;fi

# Copy opcache configration
COPY ./opcache.ini /usr/local/etc/php/conf.d/opcache.ini

#####################################
# Mysqli Modifications:
#####################################

ARG INSTALL_MYSQLI=false
RUN if [ ${INSTALL_MYSQLI} = true ]; then \  
     docker-php-ext-install mysqli \
         pdo \
         mysql \
;fi

#####################################
# Tokenizer Modifications:
#####################################

ARG INSTALL_TOKENIZER=false
RUN if [ ${INSTALL_TOKENIZER} = true ]; then \
     docker-php-ext-install tokenizer \
;fi

#
#--------------------------------------------------------------------------
# Final Touch
#--------------------------------------------------------------------------
#

ADD ./laravel.ini /usr/local/etc/php/conf.d
ADD ./laravel.pool.conf /usr/local/etc/php-fpm.d/

RUN rm -r /var/lib/apt/lists/*

RUN usermod -u 1000 www-data

WORKDIR /var/www

CMD ["php-fpm"]

EXPOSE 9000
